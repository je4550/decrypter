const crypto = require('crypto')

var refpacket = [0xAA, 0x00, 0x9B, 0x35, 0x86, 0xB7, 0xB2, 0xBA, 0xB6, 0xE0, 0x2F, 0xEA, 0xDF, 0xC2, 0xC1, 0xD7, 0xDB, 0xDA, 0xC1, 0xCA, 0xD7, 0xD8, 0x90, 0x95, 0xD1, 0xD6, 0xCD, 0xC2, 0xDE, 0xD3, 0xDC, 0x83, 0xD1, 0xCF, 0xD8, 0x99, 0xC3, 0xCC, 0xD1, 0xD6, 0x80, 0xC0, 0xDF, 0x91, 0xD3, 0x88, 0xD7, 0xD5, 0xC3, 0xC6, 0xC6, 0xD3, 0xD5, 0x93, 0x87, 0xDF, 0xDA, 0xC7, 0x82, 0xC3, 0x98, 0xDC, 0xD6, 0xC6, 0xCD, 0xD0, 0xDF, 0x97, 0x90, 0xC9, 0xD3, 0xC2, 0x94, 0x98, 0xD8, 0xD4, 0x86, 0xDA, 0xC5, 0xCE, 0x9E, 0x9C, 0xD8, 0x96, 0xD9, 0x86, 0xD2, 0x97, 0xEF, 0xD0, 0x87, 0xDE, 0xDE, 0x99, 0x8A, 0xCF, 0xD1, 0xDE, 0xCF, 0xCA, 0xC6, 0xDB, 0x9A, 0x9C, 0xD4, 0xD0, 0xC7, 0x9D, 0x86, 0xD5, 0xCC, 0x9B, 0x8A, 0xD4, 0xDF, 0xC9, 0xD6, 0x89, 0xC7, 0xD7, 0x9C, 0x8F, 0x9A, 0xC7, 0xD9, 0xC8, 0x86, 0x92, 0xFA, 0x9D, 0x87, 0xD8, 0xC6, 0xDE, 0x98, 0x89, 0xD8, 0xC6, 0xDB, 0x82, 0x98, 0xC5, 0xD2, 0xDC, 0x82, 0x9E, 0xB8, 0xB6, 0xA6, 0xC6, 0xE3, 0xCC, 0xC8, 0x97, 0xA6, 0xED, 0xDF, 0x4C];
var key = []
var table = new Array(0x401)
var key1 = "Urk#nI7ni";
var name = "loki";

console.log(crypto.createHash('md5').update("loki").digest("hex"));
generate_key2(refpacket);
crypt(refpacket, key1);


function SWAPEND(string) {
    const result = [];
    let len = string.length - 2;
    while (len >= 0) {
        result.push(string.substr(len, 2));
        len -= 2;
    }
    return result.join('');
}
function generate_key2(packet) {
    var psize = (packet[1] << 8) + (packet[2] & 0xFF);
    var k1 = packet[psize + 1];
    var k2 = (packet[psize + 2] << 8) + (packet[psize] & 0xFF)

    k1 ^= 0x25;
    k2 ^= 0x2361;

    k1 *= k1;

    for (var i = 0; i < 9; i++) {
        key[i] = table[(k1 * i + k2) & 0x3FF];
        k1 += 3;
    }
    key[9] = 0;
}
function crypt(packet, key) {
    var group = 0;
    var groupCount = 0;
    var packet_inc = 0;
    var keyval = 0;
    var counter = 0;

    counter++;
    counter++;
    packet_len = parseInt(SWAPEND((packet[counter] - 5).toString()))
    counter += 3;
    packet_inc = packet[counter];
    counter++;

    if (packet.length > 65535) {
        return 0;
    }

    for (var i = 0; i < packet.length; i++) {
        packet[i] = packet[i] ^ key[i % 9];

        keyval = group % 256;
        if (keyval != packet_inc) {
            packet[i] = packet[i] ^ keyval;
        }

        packet[i] = packet[i] ^ packet_inc;
        groupCount++;
        if (groupCount == 9) {
            group++;
            groupCount = 0;
        }
    }
}
